import 'package:flutter/material.dart';
import 'package:senior_project/news_section/widgets/appBar.dart';
import 'package:senior_project/vulnerability_section/vulnerability_service.dart';
import 'package:url_launcher/url_launcher.dart';

class VulnerabilityPage extends StatefulWidget {
  @override
  _VulnerabilityPageState createState() => _VulnerabilityPageState();
}

class _VulnerabilityPageState extends State<VulnerabilityPage> {
  final VulnerabilityService _service = VulnerabilityService();
  late Future<List<dynamic>> _vulnerabilityList;

  @override
  void initState() {
    super.initState();
    _vulnerabilityList = _service.fetchVulnerabilities();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: SectionAppBar(currentSection: 'Vulnerabilities'),
      /*AppBar(
        title: Text("Recent Vulnerability Dashboard",
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
        backgroundColor: Theme.of(context).primaryColor,
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: () async {
              List<dynamic> vulnerabilities = await _vulnerabilityList;
              showSearch(
                  context: context, delegate: DataSearch(vulnerabilities));
            },
          )
        ],
      ),
      */
      body: FutureBuilder<List<dynamic>>(
        future: _vulnerabilityList,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError || !snapshot.hasData) {
            return Center(child: Text('Error occurred'));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                var vulnerability = snapshot.data![index];
                return ListTile(
                  title: Text(vulnerability['cve']['id']),
                  subtitle:
                      Text(vulnerability['cve']['descriptions'][0]['value']),
                  onTap: () => _launchSearch(vulnerability['cve']['id']),
                );
              },
            );
          }
        },
      ),
    );
  }

  void _launchSearch(String vulnerabilityId) async {
    String url = 'https://nvd.nist.gov/vuln/detail/$vulnerabilityId';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Could not launch $url')));
    }
  }
}

class DataSearch extends SearchDelegate<String> {
  final List<dynamic> vulnerabilities;

  DataSearch(this.vulnerabilities);

  @override
  List<Widget>? buildActions(BuildContext context) {
    return [
      IconButton(
        icon: Icon(Icons.clear),
        onPressed: () {
          query = '';
          showSuggestions(context);
        },
      ),
    ];
  }

  @override
  Widget? buildLeading(BuildContext context) {
    return IconButton(
      icon: AnimatedIcon(
        icon: AnimatedIcons.menu_arrow,
        progress: transitionAnimation,
      ),
      onPressed: () {
        close(context, '');
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    final filteredVulnerabilities = vulnerabilities.where((vulnerability) {
      final description =
          vulnerability['cve']['descriptions'][0]['value'].toLowerCase();
      return description.contains(query.toLowerCase());
    }).toList();

    return _buildVulnerabilityList(filteredVulnerabilities, context);
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestedVulnerabilities = vulnerabilities.where((vulnerability) {
      final description =
          vulnerability['cve']['descriptions'][0]['value'].toLowerCase();
      return description.contains(query.toLowerCase());
    }).toList();

    return _buildVulnerabilityList(suggestedVulnerabilities, context);
  }

  Widget _buildVulnerabilityList(
      List<dynamic> vulnerabilities, BuildContext context) {
    return ListView.builder(
      itemCount: vulnerabilities.length,
      itemBuilder: (context, index) {
        var vulnerability = vulnerabilities[index];
        return ListTile(
          title: Text(vulnerability['cve']['id']),
          subtitle: Text(vulnerability['cve']['descriptions'][0]['value']),
          onTap: () => _launchSearch(vulnerability['cve']['id'], context),
        );
      },
    );
  }

  void _launchSearch(String vulnerabilityId, BuildContext context) async {
    String url = 'https://nvd.nist.gov/vuln/detail/$vulnerabilityId';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Could not launch $url')));
    }
  }
}
