import 'package:flutter/material.dart';
import 'package:senior_project/vulnerability_section/vulnerability_service.dart';
import 'package:url_launcher/url_launcher.dart';

class VulnerabilityPage extends StatefulWidget {
  @override
  _VulnerabilityPageState createState() => _VulnerabilityPageState();
}

class _VulnerabilityPageState extends State<VulnerabilityPage> {
  final VulnerabilityService _service = VulnerabilityService();
  late Future<List<dynamic>> _vulnerabilityList;
  String _searchKeyword = '';

  @override
  void initState() {
    super.initState();
    _vulnerabilityList = _service.fetchVulnerabilities();
  }

  void _launchSearch(String vulnerabilityName) async {
    // Constructing a more detailed Google search URL
    String query = Uri.encodeComponent('CVE $vulnerabilityName');
    String googleSearchUrl = 'https://www.google.com/search?q=$query';

    if (await canLaunch(googleSearchUrl)) {
      await launch(googleSearchUrl);
    } else {
      print('Could not launch $googleSearchUrl');
    }
  }

  void _filterVulnerabilities(String keyword) {
    setState(() {
      _searchKeyword = keyword.toLowerCase();
    });
  }

  bool _vulnerabilityMatchesSearch(dynamic vulnerability) {
    // Adjust the field to match against based on your data structure
    String description =
        vulnerability['cve']['descriptions'][0]['value'].toLowerCase();
    return description.contains(_searchKeyword);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: TextField(
          onChanged: _filterVulnerabilities,
          decoration: InputDecoration(
            hintText: 'Search by keyword...',
            border: InputBorder.none,
            hintStyle: TextStyle(color: Colors.white),
          ),
          style: TextStyle(color: Colors.white),
        ),
      ),
      body: FutureBuilder<List<dynamic>>(
        future: _vulnerabilityList,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError || snapshot.data == null) {
            return Center(child: Text('Error occurred'));
          } else {
            var vulnerabilities =
                snapshot.data!.where(_vulnerabilityMatchesSearch).toList();

            return ListView.builder(
              itemCount: vulnerabilities.length,
              itemBuilder: (context, index) {
                var vulnerability = vulnerabilities[index];
                return ListTile(
                  title: Text(vulnerability['cve']['id']),
                  subtitle:
                      Text(vulnerability['cve']['descriptions'][0]['value']),
                  onTap: () => _launchSearch(vulnerability['cve']['id']),
                );
              },
            );
          }
        },
      ),
    );
  }
}
